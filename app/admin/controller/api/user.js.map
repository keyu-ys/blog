{
    "version": 3,
    "sources": [
        "../../../../src/admin/controller/api/user.js"
    ],
    "names": [
        "getAction",
        "where",
        "modelInstance",
        "field",
        "id",
        "find",
        "user",
        "success",
        "get",
        "status",
        "type",
        "_logic",
        "select",
        "users",
        "model",
        "setRelation",
        "group",
        "posts",
        "postsNum",
        "map",
        "user_id",
        "post_num",
        "commentsNum",
        "comment_num",
        "forEach",
        "deleteAction",
        "fail",
        "String",
        "userInfo",
        "getPk",
        "pk",
        "delete",
        "rows",
        "affectedRows",
        "postAction",
        "self",
        "generateKey",
        "data",
        "post",
        "addUser",
        "ip",
        "insertId",
        "isAdmin",
        "firekylin",
        "USER_ADMIN",
        "failed",
        "app_key",
        "think",
        "uuid",
        "app_secret",
        "getOptions",
        "options",
        "transporter",
        "createTransport",
        "site_url",
        "hasOwnProperty",
        "http",
        "host",
        "sendMail",
        "from",
        "to",
        "email",
        "subject",
        "title",
        "text",
        "putAction",
        "saveUser"
    ],
    "mappings": "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",
    "file": "../../../../src/admin/controller/api/user.js",
    "sourcesContent": [
        "'use strict';\n\nimport nodemailer from 'nodemailer';\nimport Base from './base';\n\nexport default class extends Base {\n  /**\n   * get\n   * @return {[type]} [description]\n   */\n  async getAction() {\n    let where = {};\n    let modelInstance = this.modelInstance\n      .field('id,name,display_name,email,type,status,create_time,last_login_time,app_key,app_secret');\n\n    if(this.id) {\n      where.id = this.id;\n      let user = await modelInstance.where(where).find();\n      return this.success(user);\n    }\n\n    if(this.get('type') === 'contributor') {\n      where = {status: 2, type: 3};\n    } else {\n      where = {status: ['!=', 2], type: ['!=', 3], _logic: 'OR'};\n    }\n\n    let users = await modelInstance.where(where).select();\n    let posts = await this.model('post')\n      .field('user_id, COUNT(*) as post_num, SUM(comment_num) as comment_num')\n      .setRelation(false)\n      .group('user_id')\n      .select();\n    let postsNum = new Map(posts.map(({user_id, post_num}) => [user_id, post_num]));\n    let commentsNum = new Map(posts.map(({user_id, comment_num}) => [user_id, comment_num]));\n\n    users.forEach(user => {\n      user.post_num = postsNum.get(user.id) || 0;\n      user.comment_num = commentsNum.get(user.id) || 0;\n    });\n\n    return this.success(users);\n  }\n\n  /**\n   * 删除用户\n   *\n   * @param {number} id 被删除用户id\n   * @return {Promise}\n   */\n  async deleteAction() {\n    let id = this.id;\n\n    if (!id) {\n      return this.fail('PARAMS_ERROR');\n    }\n\n    // 禁止删除当前登录用户\n    if (id === String(this.userInfo.id)) {\n      return this.fail('DELETE_CURRENT_USER_ERROR');\n    }\n\n    let pk = await this.modelInstance.getPk();\n    let rows = await this.modelInstance.where({\n      [pk]: id\n    }).delete();\n\n    return this.success({\n      affectedRows: rows\n    });\n  }\n\n  /**\n   * add user\n   * @return {[type]} [description]\n   */\n  async postAction(self) {\n    if(this.get('type') === 'key') {\n      return await this.generateKey(self);\n    }\n\n    let data = this.post();\n    let insertId = await this.modelInstance.addUser(data, this.ip());\n\n    if (insertId.type === 'exist') {\n      return this.fail('USER_EXIST');\n    }\n\n    return this.success({id: insertId});\n  }\n\n  async generateKey(self, status) {\n    let isAdmin = this.userInfo.type === firekylin.USER_ADMIN;\n    // let isMine = this.userInfo.id === this.id;\n    if(!isAdmin) {\n      return this.failed();\n    }\n\n    let app_key = think.uuid();\n    let app_secret = think.uuid();\n\n    await this.modelInstance.generateKey(this.id, app_key, app_secret, status);\n    //TODO: 增加邮件发送 app_key 和 app_secret 的功能\n    let user = await this.modelInstance.where({id: this.id}).find();\n    let options = await this.model('options').getOptions();\n    let transporter = nodemailer.createTransport();\n    let site_url = options.hasOwnProperty('site_url') ? options.site_url : `http://${this.http.host}`;\n    transporter.sendMail({\n      from: 'no-reply@firekylin.org',\n      to: user.email,\n      subject: `【${options.title}】网站推送申请成功`,\n      text: `你的推送申请审批通过，请将下面的信息添加到自己的博客中完成最后的推送操作。\n        网站名称：${options.title}\n        网站地址：${site_url}\n        app_key: ${app_key}\n        app_secret: ${app_secret}\n      `\n    });\n\n\n    if(status !== null) { this.id = null; }\n    return await this.getAction(self);\n  }\n  /**\n   * update user info\n   * @return {[type]} [description]\n   */\n  async putAction(self) {\n    let type = this.get('type');\n\n    if (!this.id) {\n      return this.fail('PARAMS_ERROR');\n    }\n\n    if(type === 'contributor') {\n      return await this.generateKey(self, 1);\n    }\n\n    let data = this.post();\n    data.id = this.id;\n    let rows = await this.modelInstance.saveUser(data, this.ip());\n    return this.success({affectedRows: rows});\n  }\n}\n"
    ]
}