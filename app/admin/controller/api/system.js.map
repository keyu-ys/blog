{
    "version": 3,
    "sources": [
        "../../../../src/admin/controller/api/system.js"
    ],
    "names": [
        "cluster",
        "require",
        "defaults",
        "timeout",
        "strictSSL",
        "rejectUnauthorized",
        "reqIns",
        "think",
        "promisify",
        "get",
        "init",
        "http",
        "modelInstance",
        "model",
        "getAction",
        "needUpdate",
        "res",
        "onlineVersion",
        "body",
        "trim",
        "gt",
        "version",
        "console",
        "log",
        "query",
        "mysql",
        "data",
        "nodeVersion",
        "process",
        "versions",
        "node",
        "v8Version",
        "v8",
        "platform",
        "thinkjsVersion",
        "firekylinVersion",
        "mysqlVersion",
        "where",
        "userInfo",
        "type",
        "user_id",
        "id",
        "getConfig",
        "count",
        "sum",
        "posts",
        "cates",
        "comments",
        "config",
        "success",
        "updateAction",
        "test",
        "fail",
        "step",
        "uri",
        "pipe",
        "createWriteStream",
        "join",
        "RESOURCE_PATH",
        "on",
        "err",
        "error",
        "registry",
        "isWorker",
        "setTimeout",
        "worker",
        "kill",
        "select",
        "items",
        "siteConfig",
        "forEach",
        "item",
        "key",
        "value"
    ],
    "mappings": "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",
    "file": "../../../../src/admin/controller/api/system.js",
    "sourcesContent": [
        "import fs from 'fs';\nimport path from 'path';\nimport {exec} from 'child_process';\nimport semver from 'semver';\nimport request from 'request';\nimport pack from '../../../../package.json';\nimport base from './base';\n\nconst cluster = require('cluster');\n\nrequest.defaults({\n  timeout: 1000,\n  strictSSL: false,\n  rejectUnauthorized: false\n});\n\nconst reqIns = think.promisify(request.get);\n\nexport default class extends base {\n\n  init(http) {\n    super.init(http);\n\n    this.modelInstance = this.model('options');\n  }\n\n  async getAction() {\n    let needUpdate = false;\n    try {\n      let res = await reqIns('http://firekylin.org/release/.latest');\n      let onlineVersion = res.body.trim();\n      if(semver.gt(onlineVersion, pack.version)) {\n        needUpdate = onlineVersion;\n      }\n    } catch(e) {\n      console.log(e);  // eslint-disable-line no-console\n    }\n\n    let mysql = await this.modelInstance.query('SELECT VERSION() as version');\n    let data = {\n      nodeVersion: process.versions.node,\n      v8Version: process.versions.v8,\n      platform: process.platform,\n      thinkjsVersion: think.version,\n      firekylinVersion: pack.version,\n      mysqlVersion: mysql[0].version,\n      needUpdate\n    };\n\n    //非管理员只统计当前用户文章\n    let where = this.userInfo.type !== 1 ? {user_id: this.userInfo.id} : {};\n    return this.success({\n      versions: data,\n      config: await this.getConfig(),\n      count: {\n        posts: await this.model('post').where(where).count(),\n        cates: await this.model('cate').count(),\n        comments: await this.model('post').where(where).sum('comment_num')\n      }\n    });\n  }\n\n  async updateAction() {\n    if(/^win/.test(process.platform)) {\n      return this.fail('PLATFORM_NOT_SUPPORT');\n    }\n\n    let {step} = this.get();\n    switch(step) {\n      /** 下载文件 */\n      case '1':\n      default:\n        return request({uri: 'http://firekylin.org/release/latest.tar.gz'})\n          .pipe(fs.createWriteStream(path.join(think.RESOURCE_PATH, 'latest.tar.gz')))\n          .on('close', () => this.success())\n          .on('error', err => this.fail(err));\n\n      /** 解压覆盖，删除更新文件 */\n      case '2':\n        return exec(`\n          cd ${think.RESOURCE_PATH};\n          tar zvxf latest.tar.gz;\n          cp -r firekylin/* ../;\n          rm -rf firekylin latest.tar.gz`, error => {\n          if(error) {\n            this.fail(error);\n          }\n\n          this.success();\n        });\n\n      /** 安装依赖 */\n      case '3':\n        let registry = think.config('registry') || 'https://registry.npm.taobao.org';\n        return exec(`npm install --registry=${registry}`, error => {\n          if(error) {\n            this.fail(error);\n          }\n\n          this.success();\n        });\n\n      /** 重启服务 */\n      case '4':\n        if(cluster.isWorker) {\n          this.success();\n          setTimeout(() => cluster.worker.kill(), 200);\n        }\n\n        break;\n    }\n  }\n\n  async getConfig() {\n    let items = await this.modelInstance.select();\n    let siteConfig = {};\n\n    items.forEach(item => siteConfig[item.key] = item.value);\n\n    return siteConfig;\n  }\n\n}\n"
    ]
}