{
    "version": 3,
    "sources": [
        "../../../../src/admin/controller/api/file.js"
    ],
    "names": [
        "defaults",
        "strictSSL",
        "rejectUnauthorized",
        "getFileContent",
        "think",
        "promisify",
        "get",
        "writeFileAsync",
        "writeFile",
        "uploadConfig",
        "__before",
        "getUploadConfig",
        "postAction",
        "config",
        "type",
        "file",
        "post",
        "getUrlFile",
        "fail",
        "message",
        "serviceImport",
        "name",
        "serviceUpload",
        "path",
        "model",
        "getOptions",
        "options",
        "upload",
        "service",
        "uploader",
        "run",
        "result",
        "success",
        "importor",
        "page",
        "category",
        "tag",
        "url",
        "headers",
        "timeout",
        "encoding",
        "catch",
        "Error",
        "resp",
        "indexOf",
        "uploadDir",
        "file_upload_path",
        "join",
        "tmpdir",
        "isDir",
        "mkdir",
        "uploadName",
        "uuid",
        "extname",
        "uploadPath",
        "body",
        "fieldName",
        "originalFilename",
        "basename",
        "size"
    ],
    "mappings": "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",
    "file": "../../../../src/admin/controller/api/file.js",
    "sourcesContent": [
        "import os from 'os';\nimport fs from 'fs';\nimport path from 'path';\nimport request from 'request';\n\nimport Base from './base';\n\nrequest.defaults({\n  strictSSL: false,\n  rejectUnauthorized: false\n});\n\nconst getFileContent = think.promisify(request.get, request);\nconst writeFileAsync = think.promisify(fs.writeFile, fs);\n\nexport default class extends Base {\n  uploadConfig = {};\n\n  async __before() {\n    this.uploadConfig = await this.getUploadConfig();\n  }\n\n  async postAction() {\n    let config = this.uploadConfig;\n    let {type} = config;\n    let file;\n\n    /** 处理远程抓取 **/\n    if(this.post('fileUrl')) {\n      try {\n        file = await this.getUrlFile(this.post('fileUrl'));\n      } catch(e) {\n        return this.fail(e.message);\n      }\n    } else {\n      file = this.file('file');\n    }\n    if(!file) { return this.fail('FILE_UPLOAD_ERROR'); }\n\n    /** 处理导入数据 **/\n    if(this.post('importor')) {\n      return this.serviceImport(this.post('importor'), file);\n    }\n\n    /** 检查文件类型 */\n    // let contentType = file.headers['content-type'];\n\n    // 处理其它上传\n    if(!type) { return this.fail(); }\n    if(type === 'local') {\n      config = {name: this.post('name')};\n    }\n\n    return this.serviceUpload(type, file.path, config);\n  }\n\n  // 获取上传设置\n  async getUploadConfig() {\n    const options = await this.model('options').getOptions();\n    return options.upload;\n  }\n\n  /**\n   * 上传文件\n   */\n  async serviceUpload(service, file, config) {\n    try {\n      const uploader = think.service(`upload/${service}`, 'admin');\n      const result = await (new uploader()).run(file, config);\n      return this.success(result);\n    } catch (e) {\n      return this.fail(e || 'FILE_UPLOAD_ERROR');\n    }\n  }\n\n  /**\n   * 从其他平台导入数据\n   */\n  async serviceImport(service, file) {\n    try {\n      let importor = think.service(`import/${service}`, 'admin');\n      let {post, page, category, tag} = await (new importor(this)).run(file);\n      return this.success(`共导入文章 ${post} 篇，页面 ${page} 页，分类 ${category} 个，标签 ${tag} 个`);\n    } catch(e) {\n      return this.fail(e);\n    }\n  }\n\n  async getUrlFile(url) {\n    let resp = await getFileContent({\n      url,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) Chrome/47.0.2526.111 Safari/537.36'\n      },\n      strictSSL: false,\n      timeout: 1000,\n      encoding: 'binary'\n    }).catch(() => { throw new Error('UPLOAD_URL_ERROR'); });\n\n    if(resp.headers['content-type'].indexOf('image') === -1) {\n      throw new Error('UPLOAD_TYPE_ERROR');\n    }\n\n    let uploadDir = this.config('post').file_upload_path;\n    if(!uploadDir) {\n      uploadDir = path.join(os.tmpdir(), 'thinkjs/upload');\n    }\n    if(!think.isDir(uploadDir)) {\n      think.mkdir(uploadDir);\n    }\n\n    let uploadName = think.uuid(20) + path.extname(url);\n    let uploadPath = path.join(uploadDir, uploadName);\n    await writeFileAsync(uploadPath, resp.body, 'binary');\n\n    return {\n      fieldName: 'file',\n      originalFilename: path.basename(url),\n      path: uploadPath,\n      size: resp.headers['content-length']\n    };\n  }\n}\n"
    ]
}