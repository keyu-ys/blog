{
    "version": 3,
    "sources": [
        "../../../../src/admin/controller/api/theme.js"
    ],
    "names": [
        "cluster",
        "require",
        "statsAsync",
        "think",
        "promisify",
        "stat",
        "readdirAsync",
        "readdir",
        "readFileAsync",
        "readFile",
        "writeFileAsync",
        "writeFile",
        "THEME_DIR",
        "join",
        "RESOURCE_PATH",
        "pathCheck",
        "themePath",
        "basePath",
        "indexOf",
        "fail",
        "Error",
        "getAction",
        "get",
        "theme",
        "getFileList",
        "files",
        "success",
        "filePath",
        "encoding",
        "file",
        "getPageTemplateList",
        "getThemeList",
        "updateAction",
        "post",
        "content",
        "isWorker",
        "setTimeout",
        "worker",
        "kill",
        "putAction",
        "new_theme",
        "themeDir",
        "newThemeDir",
        "configPath",
        "config",
        "name",
        "model",
        "updateOptions",
        "base",
        "result",
        "pos",
        "isDirectory",
        "module",
        "children",
        "push",
        "isFile",
        "themes",
        "infoFile",
        "extend",
        "id",
        "console",
        "log",
        "templatePath",
        "templates",
        "filter",
        "test",
        "t"
    ],
    "mappings": "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",
    "file": "../../../../src/admin/controller/api/theme.js",
    "sourcesContent": [
        "'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\nimport {execSync} from 'child_process';\nimport Base from './base';\n\nconst cluster = require('cluster');\n\nconst statsAsync = think.promisify(fs.stat);\nconst readdirAsync = think.promisify(fs.readdir);\nconst readFileAsync = think.promisify(fs.readFile);\nconst writeFileAsync = think.promisify(fs.writeFile);\nconst THEME_DIR = path.join(think.RESOURCE_PATH, 'theme');\n\nexport default class extends Base {\n  /**\n   * forbidden ../ style path\n   */\n  pathCheck(themePath, basePath = THEME_DIR) {\n    if(themePath.indexOf(basePath) !== 0) {\n      this.fail();\n      throw Error(`theme path ${themePath} error`);\n    }\n    return true;\n  }\n\n  async getAction() {\n    switch(this.get('type')) {\n      case 'fileList':\n        let {theme} = this.get();\n        let themePath = path.join(THEME_DIR, theme);\n        this.pathCheck(themePath);\n\n        let files = await this.getFileList(themePath);\n        return this.success(files);\n\n      case 'file':\n        let {filePath} = this.get();\n        filePath = path.join(THEME_DIR, filePath);\n        this.pathCheck(filePath);\n\n        let file = await readFileAsync(filePath, {encoding: 'utf-8'});\n        return this.success(file);\n\n      case 'templateList':\n        return await this.getPageTemplateList();\n\n      case 'themeList':\n      default:\n        return await this.getThemeList();\n    }\n  }\n\n  async updateAction() {\n    let {filePath, content} = this.post();\n    filePath = path.join(THEME_DIR, filePath);\n    this.pathCheck(filePath);\n\n    try {\n      await writeFileAsync(filePath, content, {encoding: 'utf-8'});\n\n      if(cluster.isWorker) {\n        setTimeout(() => cluster.worker.kill(), 200);\n      }\n      this.success();\n    } catch(e) {\n      return this.fail(e);\n    }\n  }\n\n  /**\n   * Fork theme\n   */\n  async putAction() {\n    let {theme, new_theme} = this.post();\n    let themeDir = path.join(THEME_DIR, theme);\n    let newThemeDir = path.join(THEME_DIR, new_theme);\n    this.pathCheck(themeDir) && this.pathCheck(newThemeDir);\n\n    try {\n      /*let stat = */await statsAsync(newThemeDir);\n      return this.fail(`${new_theme} 已存在，请手动切换到该主题`);\n    } catch(e) {\n      execSync(`cp -r ${themeDir} ${newThemeDir}`);\n\n      let configPath = path.join(newThemeDir, 'package.json');\n      let config = think.require(configPath);\n      config.name = new_theme;\n\n      try {\n        await writeFileAsync(\n          configPath,\n          JSON.stringify(config, null, '\\t'),\n          {encoding: 'utf-8'}\n        );\n        await this.model('options').updateOptions('theme', new_theme);\n        return this.success();\n      } catch(e) {\n        return this.fail(e);\n      }\n    }\n  }\n\n  /**\n   * 递归获取文件夹树\n   */\n  async getFileList(base) {\n    let result = [];\n    let files = await readdirAsync(base);\n\n    for(let file of files) {\n      let pos = path.join(base, file);\n      let stat = await statsAsync(pos);\n      if(stat.isDirectory()) {\n        result.push({\n          module: file,\n          children: await this.getFileList(pos)\n        });\n      }\n\n      if(stat.isFile()) {\n        result.push({module: file});\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * 获取主题列表\n   */\n  async getThemeList() {\n    let themes = await readdirAsync(THEME_DIR);\n\n    let result = [];\n    for(let theme of themes) {\n      let infoFile = path.join(THEME_DIR, theme, 'package.json');\n      try {\n        /*let stat = */await statsAsync(infoFile);\n        result.push(think.extend({id: theme}, think.require(infoFile)));\n      } catch(e) {\n        console.log(e);  // eslint-disable-line no-console\n      }\n    }\n    return this.success(result);\n  }\n\n  /**\n   * 获取主题的自定义模板\n   */\n  async getPageTemplateList() {\n    let {theme} = this.get();\n    let templatePath = path.join(THEME_DIR, theme, 'template');\n    this.pathCheck(templatePath);\n\n    let templates = [];\n    try {\n      let stat = await statsAsync(templatePath);\n      if(!stat.isDirectory()) {\n        throw Error();\n      }\n    } catch(e) {\n      return this.success(templates);\n    }\n    templates = await readdirAsync(templatePath);\n    templates = templates.filter(t => /\\.html$/.test(t));\n    return this.success(templates);\n  }\n}\n"
    ]
}