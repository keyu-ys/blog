{
    "version": 3,
    "sources": [
        "../../../../src/admin/controller/api/post.js"
    ],
    "names": [
        "http",
        "_modelInstance",
        "modelInstance",
        "Object",
        "defineProperty",
        "get",
        "where",
        "type",
        "getAction",
        "data",
        "id",
        "lastest",
        "find",
        "options",
        "JSON",
        "parse",
        "userInfo",
        "user_id",
        "status",
        "keywords",
        "split",
        "indexOf",
        "is_public",
        "Number",
        "filter",
        "word",
        "length",
        "title",
        "map",
        "cate",
        "parseInt",
        "isNaN",
        "join",
        "table",
        "on",
        "cate_id",
        "field",
        "config",
        "prefix",
        "order",
        "page",
        "countSelect",
        "success",
        "getBaseAction",
        "self",
        "postAction",
        "post",
        "pathname",
        "think",
        "isEmpty",
        "fail",
        "pushPost",
        "getTagIds",
        "tag",
        "getContentAndSummary",
        "getPostTime",
        "addPost",
        "insert",
        "putAction",
        "markdown_content",
        "create_time",
        "origin_create_time",
        "datetime",
        "savePost",
        "rows",
        "affectedRows",
        "deleteAction",
        "deletePost",
        "postData",
        "postOpt",
        "canPush",
        "Array",
        "isArray",
        "push_sites",
        "extend",
        "model",
        "getOptions",
        "push_sites_keys",
        "slice",
        "site_url",
        "hasOwnProperty",
        "host",
        "pushes",
        "key",
        "appKey",
        "appSecret",
        "url",
        "p2fk",
        "push",
        "all",
        "result",
        "console",
        "log",
        "userId",
        "getLatest",
        "update_time",
        "tags",
        "setRelation",
        "tagIds",
        "promises",
        "name",
        "thenAdd",
        "then",
        "tag_id"
    ],
    "mappings": "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",
    "file": "../../../../src/admin/controller/api/post.js",
    "sourcesContent": [
        "'use strict';\n\nimport push2Firekylin from 'push-to-firekylin';\nimport moment from 'moment';\nimport Base from './base';\n\nexport default class extends Base {\n  constructor(http) {\n    super(http);\n    this._modelInstance = this.modelInstance;\n    Object.defineProperty(this, 'modelInstance', {\n      get() {\n        return this._modelInstance.where({type: 0})\n      }\n    })\n  }\n  /**\n   * get\n   * @return {[type]} [description]\n   */\n  async getAction() {\n    // this.modelInstance.field('id,user_id,type,status,title,pathname,create_time,update_time');\n    let data;\n    if(this.id) {\n      if(this.id === 'lastest') {\n        return this.lastest();\n      }\n      data = await this.modelInstance.where({id: this.id}).find();\n      //文章选项\n      if(data.options) {\n        data.options = JSON.parse(data.options) || {};\n      }else{\n        data.options = {};\n      }\n    } else {\n      let where = {};\n      //不是管理员，只显示个人的文章\n      if(this.userInfo.type !== 1) {\n        where.user_id = this.userInfo.id;\n      }\n\n      if(this.get('status')) {\n        where.status = this.get('status');\n      }\n\n      if(this.get('keyword')) {\n        let keywords = this.get('keyword').split(/\\s+/g);\n        if(keywords.indexOf(':public') > -1 || keywords.indexOf(':private') > -1) {\n          where.is_public = Number(keywords.indexOf(':public') > -1);\n          keywords = keywords.filter(word => word !== ':public' && word !== ':private');\n        }\n        if(keywords.length > 0) {\n          where.title = ['like', keywords.map(word => `%${word}%`)];\n        }\n      }\n\n      if(this.get('cate')) {\n        let cate = parseInt(this.get('cate'));\n        if(!isNaN(cate)) {\n          this.modelInstance.join({\n            table: 'post_cate',\n            join: 'left',\n            on: ['id', 'post_id']\n          });\n          where.cate_id = cate;\n        }\n      }\n\n      let field = [\n        `${this.modelInstance.config.prefix}post.id`,\n        'title',\n        'user_id',\n        'create_time',\n        'update_time',\n        'status',\n        'pathname',\n        'is_public'\n      ];\n      data = await this.modelInstance.where(where)\n        .field(field)\n        .order('create_time DESC')\n        .page(this.get('page'), 15)\n        .countSelect();\n    }\n    return this.success(data);\n  }\n\n  getBaseAction(self) {\n    return super.getAction(self);\n  }\n  /**\n   * add user\n   * @return {[type]} [description]\n   */\n  async postAction() {\n    let data = this.post();\n    //check pathname\n    let post = await this.modelInstance.where({pathname: data.pathname}).find();\n    if(!think.isEmpty(post)) {\n      return this.fail('PATHNAME_EXIST');\n    }\n\n    /** 如果是编辑发布文章的话默认状态改为审核中 **/\n    if(data.status === 3 && this.userInfo.type !== 1) {\n      data.status = 1;\n    }\n\n    /** 推送文章 **/\n    this.pushPost(data);\n\n    data.tag = await this.getTagIds(data.tag);\n    data = await this.modelInstance.getContentAndSummary(data);\n    data.user_id = this.userInfo.id;\n    data = this.modelInstance.getPostTime(data);\n    data.options = data.options ? JSON.stringify(data.options) : '';\n\n    let insert = await this.modelInstance.addPost(data);\n    return this.success(insert);\n  }\n  /**\n   * update user info\n   * @return {[type]} [description]\n   */\n  async putAction() {\n    if (!this.id) {\n      return this.fail('PARAMS_ERROR');\n    }\n\n    let data = this.post();\n    data.id = this.id;\n\n    /** 判断接收的参数中是否有 markdown_content 来区别审核通过的状态修改和普通的文章更新 */\n    if(data.markdown_content) {\n      /** 如果是编辑发布文章的话默认状态改为审核中 **/\n      if(data.status === 3 && this.userInfo.type !== 1) {\n        data.status = 1;\n      }\n\n      /** 推送文章 */\n      this.pushPost(data);\n\n      data = this.modelInstance.getPostTime(data);\n      data = await this.modelInstance.getContentAndSummary(data);\n      data.options = data.options ? JSON.stringify(data.options) : '';\n      if(data.tag) {\n        data.tag = await this.getTagIds(data.tag);\n      }\n    } else if (data.create_time) {\n      /** 审核通过的状态修改，有 create_time 即需要更新时间，时间由服务器生成 */\n\n      const post = await this.modelInstance.where({id: data.id}).find();\n      let options = JSON.parse(post.options || '{}');\n      if (typeof options === 'string') {\n        options = JSON.parse(options) || {};\n      }\n\n      if (moment(data.create_time) < moment() && !options.origin_create_time) {\n\n        data.options = JSON.stringify({\n          ...options,\n          origin_create_time: data.create_time\n        });\n        data.create_time = think.datetime(); // 此处可能出现 create_time 和 update_time 不一致的情况\n      } else {\n        // 此处需删除 create_time，或者对 create_time 的格式进行处理\n        delete data.create_time;\n      }\n    }\n\n    let rows = await this.modelInstance.savePost(data);\n    return this.success({affectedRows: rows});\n  }\n\n  async deleteAction() {\n    if(!this.id) {\n      return this.fail('PARAMS_ERROR');\n    }\n\n    /** 如果不是管理员且不是本文作者则无权限删除文章 **/\n    if(this.userInfo.type !== 1) {\n      let post = await this.modelInstance.where({id: this.id}).find();\n      if(post.user_id !== this.userInfo.id) {\n        return this.fail('USER_NO_PERMISSION');\n      }\n    }\n\n    await this.modelInstance.deletePost(this.id);\n    return this.success();\n  }\n\n  async pushPost(postData) {\n    let post = Object.assign({}, postData);\n    let postOpt = JSON.parse(post.options);\n    let canPush = Array.isArray(postOpt.push_sites) && postOpt.push_sites.length > 0;\n    if(post.status !== 3 && post.is_public !== 1 && !canPush) {\n      return;\n    }\n    post = think.extend({}, post);\n\n    let options = await this.model('options').getOptions();\n    let push_sites = options.push_sites;\n    let push_sites_keys = postOpt.push_sites;\n\n    if(post.markdown_content.slice(0, 5) !== '> 原文：') {\n      let site_url = options.hasOwnProperty('site_url') ? options.site_url : `http://${this.http.host}`;\n      post.markdown_content = `> 原文：${site_url}/post/${post.pathname}.html\n\n${post.markdown_content}`;\n    }\n\n    delete post.id;\n    delete post.cate;\n    delete post.options;\n\n    if(!Array.isArray(push_sites_keys)) { push_sites_keys = [push_sites_keys]; }\n    let pushes = push_sites_keys.map(key => {\n      let {appKey, appSecret, url} = push_sites[key];\n      let p2fk = new push2Firekylin(url, appKey, appSecret);\n      return p2fk.push(post);\n    });\n    let result = await Promise.all(pushes);\n    console.log('push result for debug: ', result);  // eslint-disable-line no-console\n  }\n\n  async lastest() {\n    let userId = this.userInfo.type !== 1 ? this.userInfo.id : null;\n    let data = await this.modelInstance.getLatest(userId, 6);\n    return this.success(data);\n  }\n\n  getPostTime(data) {\n    data.update_time = think.datetime();\n    if(!data.create_time) {\n      data.create_time = data.update_time;\n    }else{\n      data.create_time = think.datetime(data.create_time);\n    }\n    return data;\n  }\n\n\n  async getTagIds(tags) {\n    if(!tags) {\n      return [];\n    }\n    if(!think.isArray(tags)) {\n      tags = [tags];\n    }\n    let modelInstance = this.model('tag').setRelation(false), tagIds = [];\n    let promises = tags.map(name =>\n      modelInstance.where({name})\n        .thenAdd({name, pathname: name})\n        .then(data => tagIds.push({tag_id: data.id, name: name}))\n    );\n    await Promise.all(promises);\n    return tagIds;\n  }\n}\n"
    ]
}