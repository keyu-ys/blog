{
    "version": 3,
    "sources": [
        "../../../src/admin/controller/post_push.js"
    ],
    "names": [
        "postModelInstance",
        "model",
        "__before",
        "checkAuth",
        "data",
        "app_key",
        "auth_key",
        "post",
        "where",
        "find",
        "poster",
        "think",
        "isEmpty",
        "fail",
        "app_secret",
        "passwordHash",
        "result",
        "checkPassword",
        "markdown_content",
        "updatePost",
        "getContentAndSummary",
        "create_time",
        "getPostTime",
        "tag",
        "getTagIds",
        "savePost",
        "rows",
        "success",
        "affectedRows",
        "getAction",
        "get",
        "postAction",
        "pathname",
        "exPost",
        "user",
        "id",
        "user_id",
        "status",
        "type",
        "addPost",
        "insertId",
        "putAction",
        "deleteAction"
    ],
    "mappings": "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",
    "file": "../../../src/admin/controller/post_push.js",
    "sourcesContent": [
        "import {PasswordHash} from 'phpass';\nimport Post from './api/post';\n\nexport default class extends Post {\n  postModelInstance = this.model('post');\n\n  async __before() {\n\n  }\n\n  async checkAuth(data) {\n    let {app_key, auth_key, ...post} = data;\n    //check user\n    let poster = await this.model('user').where({app_key}).find();\n    if(think.isEmpty(poster)) {\n      return this.fail('POSTER_NOT_EXIST');\n    }\n\n    this.poster = poster;\n    let {app_secret} = poster;\n    let passwordHash = new PasswordHash();\n    let result = passwordHash.checkPassword(`${app_secret}${post.markdown_content}`, auth_key);\n    return result;\n  }\n\n  async updatePost(post) {\n    if(post.markdown_content) { post = this.postModelInstance.getContentAndSummary(post); }\n    if(post.create_time) { post = this.postModelInstance.getPostTime(post); }\n    if(post.tag) { post = await this.getTagIds(post.tag); }\n    let rows = await this.postModelInstance.savePost(post);\n    return this.success({affectedRows: rows});\n  }\n\n  async getAction() {\n    if(!this.get('app_key') || !this.get('auth_key')) {\n      return this.fail('PARAMS_ERROR');\n    }\n\n    let {app_key, auth_key} = this.get();\n    let result = await this.checkAuth({app_key, auth_key, markdown_content: 'Firekylin'});\n    return result ? this.success('KEY_CHECK_SUCCESS') : this.fail('KEY_CHECK_FAILED');\n  }\n\n  async postAction() {\n    let post = this.post();\n    if(!this.checkAuth(post)) { return this.fail('POST_CONTENT_ERROR'); }\n\n    //check pathname\n    let exPost = await this.postModelInstance.where({pathname: post.pathname}).find();\n    if(!think.isEmpty(exPost)) {\n      if(exPost.user.id !== this.poster.id) {\n        return this.fail('POST_USER_ERROR');\n      }\n      post.id = exPost.id;\n      return this.updatePost(post);\n    }\n\n    post.user_id = this.poster.id;\n    post = await this.postModelInstance.getContentAndSummary(post);\n    post = this.postModelInstance.getPostTime(post);\n    post.tag = await this.getTagIds(post.tag);\n\n    if(post.status === 3 && this.poster.type !== 1) {\n      post.status = 1;\n    }\n\n    let insertId = await this.postModelInstance.addPost(post);\n    return this.success({id: insertId});\n  }\n\n  async putAction() {\n  }\n\n  async deleteAction() {\n  }\n}\n"
    ]
}