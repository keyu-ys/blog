{
    "version": 3,
    "sources": [
        "../../../src/admin/model/tag.js"
    ],
    "names": [
        "init",
        "args",
        "relation",
        "post_tag",
        "type",
        "think",
        "model",
        "HAS_MANY",
        "fKey",
        "addTag",
        "data",
        "where",
        "name",
        "_logic",
        "pathname",
        "thenAdd",
        "saveTag",
        "id",
        "find",
        "info",
        "isEmpty",
        "reject",
        "Error",
        "update",
        "deleteTag",
        "tag_id",
        "delete"
    ],
    "mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AACA;;;;;;;;;;;AAIE;;;;;mBAKAA,I,mBAAc;AAAA;;AAAA,sCAANC,IAAM;AAANA,UAAM;AAAA;;AACZ,4CAAMD,IAAN,iDAAcC,IAAd;;AAEA,SAAKC,QAAL,GAAgB;AACdC,gBAAU;AACRC,cAAMC,MAAMC,KAAN,CAAYC,QADV;AAERC,cAAM;AAFE;AADI,KAAhB;AAMD,G;;mBAEDC,M,mBAAOC,I,EAAM;AACX,QAAIC,QAAQ;AACVC,YAAMF,KAAKE,IADD;AAEVC,cAAQ;AAFE,KAAZ;AAIA,QAAGH,KAAKI,QAAR,EAAkB;AAChBH,YAAMG,QAAN,GAAiBJ,KAAKI,QAAtB;AACD;AACD,WAAO,KAAKH,KAAL,CAAWA,KAAX,EAAkBI,OAAlB,CAA0BL,IAA1B,CAAP;AACD,G;;mBAEKM,O;2FAAQN,I;;;;;;;qBACK,KAAKC,KAAL,CAAW,EAACM,IAAIP,KAAKO,EAAV,EAAX,EAA0BC,IAA1B,E;;;AAAbC,kB;;mBACDd,MAAMe,OAAN,CAAcD,IAAd,C;;;;;+CACM,kBAAQE,MAAR,CAAe,IAAIC,KAAJ,CAAU,eAAV,CAAf,C;;;+CAGF,KAAKX,KAAL,CAAW,EAACM,IAAIP,KAAKO,EAAV,EAAX,EAA0BM,MAA1B,CAAiCb,IAAjC,C;;;;;;;;;;;;;;;;;mBAGHc,S;6FAAUC,M;;;;;AACd,mBAAKnB,KAAL,CAAW,UAAX,EAAuBK,KAAvB,CAA6B,EAACc,cAAD,EAA7B,EAAuCC,MAAvC;gDACO,KAAKf,KAAL,CAAW,EAACM,IAAIQ,MAAL,EAAX,EAAyBC,MAAzB,E",
    "file": "../../../src/admin/model/tag.js",
    "sourcesContent": [
        "'use strict';\n\nimport Base from './base';\n/**\n * relation model\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {} args []\n   * @return {}         []\n   */\n  init(...args) {\n    super.init(...args);\n\n    this.relation = {\n      post_tag: {\n        type: think.model.HAS_MANY,\n        fKey: 'tag_id'\n      }\n    }\n  }\n\n  addTag(data) {\n    let where = {\n      name: data.name,\n      _logic: 'OR'\n    };\n    if(data.pathname) {\n      where.pathname = data.pathname;\n    }\n    return this.where(where).thenAdd(data);\n  }\n\n  async saveTag(data) {\n    let info = await this.where({id: data.id}).find();\n    if(think.isEmpty(info)) {\n      return Promise.reject(new Error('TAG_NOT_EXIST'));\n    }\n\n    return this.where({id: data.id}).update(data);\n  }\n\n  async deleteTag(tag_id) {\n    this.model('post_tag').where({tag_id}).delete();\n    return this.where({id: tag_id}).delete();\n  }\n}\n"
    ]
}