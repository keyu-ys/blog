{
    "version": 3,
    "sources": [
        "../../../src/admin/model/user.js"
    ],
    "names": [
        "getEncryptPassword",
        "password",
        "passwordHash",
        "hash",
        "hashPassword",
        "checkPassword",
        "userInfo",
        "generateKey",
        "userId",
        "app_key",
        "app_secret",
        "status",
        "data",
        "where",
        "id",
        "update",
        "afterSelect",
        "map",
        "afterFind",
        "item",
        "create_time",
        "think",
        "datetime",
        "Date",
        "last_login_time",
        "addUser",
        "ip",
        "encryptPassword",
        "name",
        "username",
        "email",
        "_logic",
        "thenAdd",
        "display_name",
        "create_ip",
        "last_login_ip",
        "type",
        "saveUser",
        "find",
        "info",
        "isEmpty",
        "reject",
        "Error",
        "updateData",
        "forEach",
        "count"
    ],
    "mappings": "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",
    "file": "../../../src/admin/model/user.js",
    "sourcesContent": [
        "'use strict';\n\nimport {PasswordHash} from 'phpass';\nimport Base from './base';\n/**\n * model\n */\nexport default class extends Base {\n\n  /**\n   * get password\n   * @param  {String} username []\n   * @param  {String} salt     []\n   * @return {String}          []\n   */\n  getEncryptPassword(password) {\n    let passwordHash = new PasswordHash();\n    let hash = passwordHash.hashPassword(password);\n    return hash;\n  }\n  /**\n   * check password\n   * @param  {[type]} userInfo [description]\n   * @param  {[type]} password [description]\n   * @return {[type]}          [description]\n   */\n  checkPassword(userInfo, password) {\n    let passwordHash = new PasswordHash();\n    return passwordHash.checkPassword(password, userInfo.password);\n  }\n\n  generateKey(userId, app_key, app_secret, status) {\n    let data = {app_key, app_secret};\n    if(status) { data.status = status; }\n    this.where({id: userId}).update(data);\n  }\n\n  /**\n   * after select\n   * @param  {[type]} data [description]\n   * @return {[type]}      [description]\n   */\n  afterSelect(data) {\n    return data.map(item => {\n      return this.afterFind(item);\n    });\n  }\n  afterFind(data) {\n    if(data.create_time) {\n      data.create_time = think.datetime(new Date(data.create_time));\n    }\n    if(data.last_login_time) {\n      data.last_login_time = think.datetime(new Date(data.last_login_time));\n    }\n    return data;\n  }\n  /**\n   * 添加用户\n   * @param {[type]} data [description]\n   * @param {[type]} ip   [description]\n   */\n  addUser(data, ip) {\n    let create_time = think.datetime();\n    let encryptPassword = this.getEncryptPassword(data.password);\n    return this.where({name: data.username, email: data.email, _logic: 'OR'}).thenAdd({\n      name: data.username,\n      email: data.email,\n      display_name: data.display_name,\n      password: encryptPassword,\n      create_time: create_time,\n      last_login_time: create_time,\n      create_ip: ip,\n      last_login_ip: ip,\n      type: data.type,\n      status: data.status\n    });\n  }\n  /**\n   * 保存用户信息\n   * @param  {[type]} data [description]\n   * @return {[type]}      [description]\n   */\n  async saveUser(data, ip) {\n    let info = await this.where({id: data.id}).find();\n    if(think.isEmpty(info)) {\n      return Promise.reject(new Error('UESR_NOT_EXIST'));\n    }\n    let password = data.password;\n    if(password) {\n      password = this.getEncryptPassword(password);\n    }\n    let updateData = {};\n    ['display_name', 'type', 'status'].forEach(item => {\n      if(data[item]) {\n        updateData[item] = data[item];\n      }\n    });\n    if(password) {\n      updateData.password = password;\n    }\n    if(think.isEmpty(updateData)) {\n      return Promise.reject('DATA_EMPTY');\n    }\n    if(!info.email && data.email) {\n      let count = await this.where({email: data.email}).count('email');\n      if(!count) {\n        updateData.email = data.email;\n      }\n    }\n    updateData.last_login_time = think.datetime();\n    updateData.last_login_ip = ip;\n    return this.where({id: data.id}).update(updateData);\n  }\n}\n"
    ]
}