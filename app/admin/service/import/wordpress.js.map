{
    "version": 3,
    "sources": [
        "../../../../src/admin/service/import/wordpress.js"
    ],
    "names": [
        "WP_POST_STATUS",
        "publish",
        "future",
        "draft",
        "pending",
        "private",
        "trash",
        "formatArray",
        "obj",
        "i",
        "Array",
        "isArray",
        "length",
        "user",
        "channel",
        "hasOwnProperty",
        "authors",
        "authorsPromise",
        "map",
        "userModelInstance",
        "addUser",
        "username",
        "author",
        "email",
        "display_name",
        "password",
        "DEFAULT_USER_PWD",
        "type",
        "status",
        "all",
        "post",
        "item",
        "posts",
        "filter",
        "keys",
        "key",
        "postsPromise",
        "where",
        "name",
        "find",
        "cate",
        "cates",
        "category",
        "$",
        "domain",
        "_",
        "cateModelInstance",
        "setRelation",
        "field",
        "select",
        "id",
        "summary",
        "title",
        "pathname",
        "decodeURIComponent",
        "content",
        "create_time",
        "formatDate",
        "Date",
        "pubDate",
        "update_time",
        "user_id",
        "comment_num",
        "allow_comment",
        "Number",
        "is_public",
        "tag",
        "markdown_content",
        "toMarkdown",
        "postModelInstance",
        "addPost",
        "console",
        "log",
        "page",
        "pages",
        "pagesPromise",
        "pageModelInstance",
        "tags",
        "tagsPromise",
        "tagName",
        "tagSlug",
        "push",
        "tagModelInstance",
        "addTag",
        "categories",
        "categoriesPromise",
        "cateName",
        "cateSlug",
        "addCate",
        "pid",
        "parseFile",
        "file",
        "data",
        "readFileSync",
        "path",
        "encoding",
        "parser",
        "Parser",
        "parseString",
        "think",
        "promisify",
        "wxrJSON",
        "rss",
        "run",
        "importData"
    ],
    "mappings": "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",
    "file": "../../../../src/admin/service/import/wordpress.js",
    "sourcesContent": [
        "import fs from 'fs';\nimport xml2js from 'xml2js';\nimport Base from './base';\n\nconst WP_POST_STATUS = {\n  publish: 3, //发布\n  future: 3,  //未来发布\n  draft: 0, //草稿\n  pending: 1, //待审核\n  private: 3, //私密文章对应 is_public 字段为 false, 发布状态为已发布\n  trash: 2, //删除文章没有对应关系遂转为已拒绝文章\n};\n\nexport default class extends Base {\n\n  formatArray(obj) {\n    for(var i in obj) {\n      if(Array.isArray(obj[i]) && obj[i].length === 1) {\n        obj[i] = obj[i][0];\n      } else if(typeof(obj[i]) === 'object') {\n        obj[i] = this.formatArray(obj[i]);\n      }\n    }\n    return obj;\n  }\n\n  /**\n   * 导入用户\n   */\n  async user(channel) {\n    /** 无用户无需导入返回导入0个用户 */\n    if(!channel.hasOwnProperty('wp:author')) {\n      return 0;\n    }\n\n    let authors = channel['wp:author'];\n\n    let authorsPromise = authors.map(author => this.userModelInstance.addUser({\n      username: author['wp:author_login'][0],\n      email: author['wp:author_email'][0],\n      display_name: author['wp:author_display_name'][0],\n      password: Base.DEFAULT_USER_PWD,\n      type: 2, //默认导入用户都为编辑\n      status: 2, //默认导入用户都处于禁用状态\n    }, '127.0.0.1'));\n    await Promise.all(authorsPromise);\n\n    return authors.length; //返回最终导入用户的数量\n  }\n\n  /**\n   * 导入文章\n   */\n  async post(channel) {\n    if(!Array.isArray(channel.item)) {\n      return 0;\n    }\n\n    let posts = channel.item.filter(item => {\n      let keys = [\n        'wp:post_type',\n        'dc:creator',\n        'content:encoded',\n        'wp:post_name',\n        'wp:post_date',\n        'wp:status',\n        'wp:comment_status'\n      ];\n\n      for(let key of keys) {\n        if(!Array.isArray(item[key]) || !item[key].length) {\n          return false;\n        }\n      }\n      return item['wp:post_type'][0] ==='post';\n    });\n\n    let postsPromise = posts.map(async item => {\n      try{\n        //获取用户\n        let user = await this.userModelInstance.where({name: item['dc:creator'][0]}).find();\n        //查询分类 ID\n        let cate = [];\n        if(item.hasOwnProperty('category')) {\n          let cates = item.category.filter(item => item.$.domain === 'category').map(item => item._);\n          if(Array.isArray(cates) && cates.length > 0) {\n            cate = await this.cateModelInstance.setRelation(false)\n              .field('id')\n              .where({name: ['IN', cates]})\n              .select();\n            cate = cate.map(item => item.id);\n          }\n        }\n\n        //摘要有可能是空\n        let summary;\n        if(item.hasOwnProperty('excerpt:encoded') && item['excerpt:encoded'][0] !== '') {\n          summary = item['excerpt:encoded'][0];\n        } else {\n          summary = item['content:encoded'][0];\n        }\n\n        let post = {\n          title: item.title[0],\n          pathname: decodeURIComponent(item['wp:post_name'][0]),\n          content: item['content:encoded'][0],\n          summary,\n          create_time: this.formatDate(new Date(item.pubDate[0])),\n          update_time: item['wp:post_date'][0],\n          status: WP_POST_STATUS[ item['wp:status'][0] ] || 0,\n          user_id: user.id,\n          comment_num: 0,\n          allow_comment: Number(item['wp:comment_status'][0] === 'open'),\n          is_public: Number(item['wp:status'][0] !== 'private'),\n          tag: item.hasOwnProperty('category') ?\n            item.category.filter(item => item.$.domain === 'post_tag').map(item => item._) : [],\n          cate\n        };\n\n        post.markdown_content = this.toMarkdown(post.content);\n        await this.postModelInstance.addPost(post);\n      } catch(e) {\n        console.log(e);  // eslint-disable-line no-console\n      }\n    });\n    await Promise.all(postsPromise);\n\n    return posts.length;\n  }\n\n  /**\n   * 导入页面\n   */\n  async page(channel) {\n    if(!Array.isArray(channel.item)) {\n      return 0;\n    }\n\n    let pages = channel.item.filter(item => {\n      let keys = [\n        'wp:post_type',\n        'dc:creator',\n        'excerpt:encoded',\n        'content:encoded',\n        'wp:post_name',\n        'wp:status',\n        'wp:comment_status',\n      ];\n      for(let key of keys) {\n        if(!Array.isArray(item[key]) || !item[key].length) {\n          return false;\n        }\n      }\n      return item['wp:post_type'][0] === 'page';\n    });\n\n    let pagesPromise = pages.map(async item => {\n      let user = await this.userModelInstance.where({name: item['dc:creator'][0]}).find();\n      let summary = item['excerpt:encoded'][0];\n      if(summary === '') {\n        summary = item['content:encoded'][0];\n      }\n\n      let page = {\n        title: item.title[0],\n        pathname: decodeURIComponent(item['wp:post_name'][0]),\n        content: item['content:encoded'][0],\n        summary,\n        create_time: this.formatDate(new Date(item.pubDate[0])),\n        update_time: item['wp:post_date'][0],\n        status: WP_POST_STATUS[ item['wp:status'][0] ] || 0,\n        user_id: user.id,\n        comment_num: 0,\n        allow_comment: item['wp:comment_status'][0] === 'open',\n        is_public: item['wp:status'][0] !== 'private',\n      };\n      page.markdown_content = this.toMarkdown(page.content);\n      await this.pageModelInstance.addPost(page);\n    });\n    Promise.all(pagesPromise);\n\n    return pages.length;\n  }\n\n  /**\n   * 导入标签\n   */\n  async tag(channel) {\n    if(!Array.isArray(channel['wp:tag'])) {\n      return 0;\n    }\n\n    let tags = channel['wp:tag'];\n    let tagsPromise = [];\n    for(let tag of tags) {\n      let tagName = tag['wp:tag_name'], tagSlug = tag['wp:tag_slug'];\n      if(!Array.isArray(tagName) || !tagName.length) {\n        continue;\n      }\n      if(!Array.isArray(tagSlug) || !tagName.length) {\n        continue;\n      }\n\n      tagsPromise.push(this.tagModelInstance.addTag({\n        name: tagName[0],\n        pathname: decodeURIComponent(tagSlug[0])\n      }));\n    }\n\n    await Promise.all(tagsPromise);\n    return tags.length;\n  }\n\n  /**\n   * 导入分类\n   * 为了简单不支持子分类导入，默认所有分类为一级分类\n   */\n  async category(channel) {\n    if(!Array.isArray(channel['wp:category'])) {\n      return 0;\n    }\n\n    let categories = channel['wp:category'];\n    let categoriesPromise = [];\n    for(let cate of categories) {\n      let cateName = cate['wp:cat_name'], cateSlug = cate['wp:category_nicename'];\n      if(!Array.isArray(cateName) || !cateName.length) {\n        continue;\n      }\n      if(!Array.isArray(cateSlug) || !cateSlug.length) {\n        continue;\n      }\n\n      categoriesPromise.push(this.cateModelInstance.addCate({\n        name: cateName[0],\n        pathname: decodeURIComponent(cateSlug[0]),\n        pid: 0\n      }));\n    }\n\n    await Promise.all(categoriesPromise);\n    return categories.length;\n  }\n\n  /**\n   * 处理上传文件获取导入数据\n   */\n  async parseFile(file) {\n    let data = fs.readFileSync(file.path, {encoding: 'utf-8'});\n\n    let parser = new xml2js.Parser();\n    let parseString = think.promisify(parser.parseString, parser);\n    let wxrJSON = await parseString(data);\n\n    return this.formatArray(wxrJSON).rss.channel;\n  }\n\n  /**\n   * 执行导入\n   */\n  async run(file) {\n    let channel = await this.parseFile(file);\n    return await this.importData(channel);\n  }\n}\n"
    ]
}