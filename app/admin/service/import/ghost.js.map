{
    "version": 3,
    "sources": [
        "../../../../src/admin/service/import/ghost.js"
    ],
    "names": [
        "GHOST_POST_STATUS",
        "published",
        "draft",
        "user",
        "users",
        "Array",
        "isArray",
        "usersPromise",
        "map",
        "userModelInstance",
        "addUser",
        "username",
        "slug",
        "email",
        "display_name",
        "name",
        "password",
        "DEFAULT_USER_PWD",
        "type",
        "status",
        "all",
        "length",
        "post",
        "posts",
        "tags",
        "categories",
        "post_tags",
        "posts_tags",
        "post_categories",
        "posts_categories",
        "filter",
        "item",
        "page",
        "postsPromise",
        "userSlug",
        "id",
        "author_id",
        "where",
        "find",
        "tag",
        "retTag",
        "post_id",
        "tag_id",
        "includes",
        "tagModelInstance",
        "setRelation",
        "select",
        "cate",
        "retCategory",
        "category_id",
        "cateModelInstance",
        "title",
        "pathname",
        "content",
        "html",
        "summary",
        "markdown_content",
        "hasOwnProperty",
        "markdown",
        "toMarkdown",
        "create_time",
        "formatDate",
        "Date",
        "created_at",
        "update_time",
        "updated_at",
        "user_id",
        "comment_num",
        "allow_comment",
        "is_public",
        "Number",
        "visibility",
        "postModelInstance",
        "addPost",
        "console",
        "log",
        "pages",
        "pagesPromise",
        "pageModelInstance",
        "tagsPromise",
        "addTag",
        "category",
        "parseFile",
        "file",
        "jsonObj",
        "think",
        "safeRequire",
        "path",
        "db",
        "data",
        "e",
        "Error",
        "run",
        "importData"
    ],
    "mappings": "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",
    "file": "../../../../src/admin/service/import/ghost.js",
    "sourcesContent": [
        "import Base from './base';\n\nconst GHOST_POST_STATUS = {\n  published: 3, //发布\n  draft: 0 //草稿\n};\n\nexport default class extends Base {\n  /**\n   * 导入用户\n   */\n  async user({users}) {\n    if(!users || !Array.isArray(users)) {\n      return 0;\n    }\n\n    const usersPromise = users.map(user => this.userModelInstance.addUser({\n      username: user.slug,\n      email: user.email,\n      display_name: user.name,\n      password: Base.DEFAULT_USER_PWD,\n      type: 2, //默认导入用户都为编辑\n      status: 2, //默认导入用户都处于禁用状态\n    }, '127.0.0.1'));\n    await Promise.all(usersPromise);\n\n    return users.length;\n  }\n\n  /**\n   * 导入文章\n   */\n  async post({\n    posts,\n    users,\n    tags,\n    categories,\n    post_tags,\n    posts_tags,\n    post_categories,\n    posts_categories\n  }) {\n    if(!Array.isArray(posts) || !Array.isArray(users)) {\n      return 0;\n    }\n\n    post_tags = post_tags || posts_tags;\n    post_categories = post_categories || posts_categories;\n    if(!Array.isArray(post_tags)) {\n      post_tags = [];\n    }\n    if(!Array.isArray(post_categories)) {\n      post_categories = [];\n    }\n    if(!Array.isArray(tags)) {\n      tags = [];\n    }\n    if(!Array.isArray(categories)) {\n      categories = [];\n    }\n\n    posts = posts.filter(item => item.page === 0);\n    const postsPromise = posts.map(async item => {\n      try{\n        //获取用户\n        const userSlug = users.filter(user => user.id === item.author_id)[0].slug;\n        const user = await this.userModelInstance.where({ name: userSlug }).find();\n\n        //获取标签\n        let tag = [];\n        let retTag = post_tags.filter(tag => tag.post_id === item.id).map(tag => tag.tag_id);\n        retTag = tags.filter(({id}) => retTag.includes(id)).map(({name}) => name);\n        if(retTag.length) {\n          tag = await this.tagModelInstance.setRelation(false).where({name: ['IN', retTag]}).select();\n          tag = tag.map(item => item.id);\n        }\n\n        //获取分类\n        let cate = [];\n        let retCategory = post_categories.filter(({post_id}) => post_id === item.id)\n          .map(({category_id}) => category_id);\n        retCategory = categories.filter(({id}) => retCategory.includes(id)).map(({name}) => name);\n        if(retCategory.length) {\n          cate = await this.cateModelInstance.setRelation(false).where({name: ['IN', retCategory]}).select();\n          cate = cate.map(item => item.id);\n        }\n\n        const post = {\n          title: item.title,\n          pathname: item.slug,\n          content: item.html,\n          summary: item.html,\n          markdown_content: item.hasOwnProperty('markdown') ? item.markdown : this.toMarkdown(item.html),\n          create_time: this.formatDate(new Date(item.created_at)),\n          update_time: this.formatDate(new Date(item.updated_at)),\n          status: GHOST_POST_STATUS[item.status] || 0,\n          user_id: user.id,\n          comment_num: 0,\n          allow_comment: item.hasOwnProperty('allow_comment') ? item.allow_comment : 1,\n          is_public: item.hasOwnProperty('visibility') ? Number(item.visibility === 'public') : 1,\n          tag,\n          cate\n        };\n        await this.postModelInstance.addPost(post);\n      } catch(e) {\n        console.log(e);  // eslint-disable-line no-console\n      }\n    });\n    Promise.all(postsPromise);\n\n    return posts.length;\n  }\n\n  /**\n   * 导入页面\n   */\n  async page({\n    posts,\n    users\n  }) {\n    if(!Array.isArray(posts)) {\n      return 0;\n    }\n\n    const pages = posts.filter(item => item.page === 1 && item.title);\n    const pagesPromise = pages.map(async item => {\n      const userSlug = users.filter(user => user.id === item.author_id)[0].slug;\n      const user = await this.userModelInstance.where({ name: userSlug }).find();\n\n      const page = {\n        title: item.title,\n        pathname: item.slug,\n        content: item.html,\n        summary: item.html,\n        markdown_content: item.hasOwnProperty('markdown') ? item.markdown : this.toMarkdown(item.html),\n        create_time: this.formatDate(new Date(item.created_at)),\n        update_time: this.formatDate(new Date(item.updated_at)),\n        status: GHOST_POST_STATUS[item.status] || 0,\n        user_id: user.id,\n        comment_num: 0,\n        allow_comment: item.hasOwnProperty('allow_comment') ? item.allow_comment : 1,\n        is_public: item.hasOwnProperty('visibility') ? Number(item.visibility === 'public') : 1,\n      };\n      await this.pageModelInstance.addPost(page);\n    });\n    Promise.all(pagesPromise);\n\n    return pages.length;\n  }\n\n  /**\n   * 导入标签\n   */\n  async tag({tags}) {\n    if(!tags || !Array.isArray(tags)) {\n      return 0;\n    }\n\n    const tagsPromise = tags.map(tag => this.tagModelInstance.addTag({\n      name: tag.name,\n      pathname: tag.slug\n    }));\n    await Promise.all(tagsPromise);\n\n    return tags.length;\n  }\n\n  /**\n   * 导入分类\n   */\n  async category() {\n    return 0;\n  }\n\n  /**\n   * 处理上传文件获取导入数据\n   */\n  parseFile(file) {\n    try {\n      let jsonObj = think.safeRequire(file.path);\n      if(Array.isArray(jsonObj.db) && jsonObj.db.length) {\n        jsonObj = jsonObj.db[0];\n      }\n      return jsonObj.data;\n    } catch(e) {\n      throw Error('INVALID_FILE');\n    }\n  }\n\n  /**\n   * 执行导入\n   */\n  async run(file) {\n    return await this.importData(this.parseFile(file));\n  }\n}\n"
    ]
}