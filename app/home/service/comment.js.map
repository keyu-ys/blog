{
    "version": 3,
    "sources": [
        "../../../src/home/service/comment.js"
    ],
    "names": [
        "defaults",
        "strictSSL",
        "rejectUnauthorized",
        "_",
        "get",
        "think",
        "promisify",
        "post",
        "init",
        "args",
        "sync",
        "optionsModel",
        "model",
        "getOptions",
        "options",
        "comment",
        "site_url",
        "name",
        "type",
        "syncFromDisqus",
        "syncFromDuoshuo",
        "syncFromChangyan",
        "syncFromNetease",
        "getPostData",
        "postModel",
        "setRelation",
        "order",
        "field",
        "select",
        "allPost",
        "keys",
        "map",
        "key",
        "md5",
        "item",
        "pathname",
        "postData",
        "isEmpty",
        "threads",
        "index",
        "ths",
        "slice",
        "length",
        "url",
        "join",
        "catch",
        "response",
        "data",
        "body",
        "match",
        "JSON",
        "parse",
        "counts",
        "promises",
        "comments",
        "id",
        "comment_num",
        "where",
        "update",
        "all",
        "clearPostCache",
        "promise",
        "push",
        "result",
        "i",
        "formData",
        "th",
        "sourceId",
        "form",
        "resp",
        "cache",
        "service",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/home/service/comment.js",
    "sourcesContent": [
        "'use strict';\n\nimport request from 'request';\n\nrequest.defaults({\n  strictSSL: false,\n  rejectUnauthorized: false\n});\n\nconst _ = {\n  get: think.promisify(request, request),\n  post: think.promisify(request.post, request)\n};\n\nexport default class extends think.service.base {\n  /**\n   * init\n   * @return {}         []\n   */\n  init(...args) {\n    super.init(...args);\n  }\n  /**\n   * sync post comments\n   * @return {[type]} [description]\n   */\n  async sync() {\n    let optionsModel = this.model('options');\n    let options = await optionsModel.getOptions();\n    let comment = options.comment;\n    comment.site_url = options.site_url;\n\n    if(comment.name) {\n      if(comment.type === 'disqus') {\n        return this.syncFromDisqus(comment);\n      }else if(comment.type === 'duoshuo') {\n        return this.syncFromDuoshuo(comment);\n      }else if(comment.type === 'changyan') {\n        return this.syncFromChangyan(comment);\n      }else if(comment.type === 'netease') {\n        return this.syncFromNetease(comment);\n      }\n    }\n  }\n\n  /**\n   * get post data\n   * @return {[type]} [description]\n   */\n  async getPostData() {\n    let postModel = this.model('post');\n    let allPost = await postModel.setRelation(false)\n      .order('create_time DESC')\n      .field('id,pathname,comment_num,type')\n      .select();\n    let keys = {};\n    allPost.map(item => {\n      let key = think.md5(item.pathname);\n      keys[key] = item;\n      return key;\n    });\n    return keys;\n  }\n  /**\n   * sync from disqus\n   * @return {[type]} [description]\n   */\n  async syncFromDisqus(comment) {\n\n    let postData = await this.getPostData();\n    if(think.isEmpty(postData)) {\n      return;\n    }\n    let threads = Object.keys(postData); //.join('&l=')\n    let index = 0;\n    while(true) {  // eslint-disable-line no-constant-condition\n      let ths = threads.slice(index, index + 10);\n      index += 10;\n      if(!ths.length) {\n        return;\n      }\n      let url = `https://${comment.name}.disqus.com/count-data.js?1=${ths.join('&1=')}`;\n      //think.log(`sync comments ${url}`);\n      let response = await _.get(url).catch(() => {});\n      if(!response) {\n        continue;\n      }\n      let data = response.body.match(/DISQUSWIDGETS.displayCount\\(([^\\(\\)]+)\\);/);\n      if(!data) {\n        continue;\n      }\n\n      data = JSON.parse(data[1]).counts;\n      let promises = data.map(item => {\n        if(item.comments === postData[item.id].comment_num) {\n          return;\n        }\n        let id = postData[item.id].id;\n        return this.model('post').where({id: id}).update({comment_num: item.comments});\n      });\n      await Promise.all(promises);\n      if(promises.length) {\n        await this.clearPostCache();\n      }\n    }\n  }\n  /**\n   * sync from duoshuo\n   * @return {[type]} [description]\n   */\n  async syncFromDuoshuo(comment) {\n    let postData = await this.getPostData();\n    if(think.isEmpty(postData)) {\n      return;\n    }\n    let threads = Object.keys(postData);\n    let index = 0;\n    while(true) {  // eslint-disable-line no-constant-condition\n      let ths = threads.slice(index, index + 10);\n      index += 10;\n      if(!ths.length) {\n        return;\n      }\n      let url = `http://api.duoshuo.com/threads/counts.json?short_name=${comment.name}&threads=${ths.join(',')}`;\n      //think.log(`sync comments ${url}`);\n      let response = await _.get(url);\n      let data = JSON.parse(response.body).response;\n      let promises = [];\n      for(let key in data) {\n        if(data[key].comments === postData[key].comment_num) {\n          continue;\n        }\n        let id = postData[key].id;\n        let promise = this.model('post').where({id: id}).update({comment_num: data[key].comments});\n        promises.push(promise);\n      }\n      await Promise.all(promises);\n      if(promises.length) {\n        await this.clearPostCache();\n      }\n    }\n  }\n  /**\n   * sync from changyan\n   * @return {[type]} [description]\n   */\n  async syncFromChangyan(comment) {\n    let postData = await this.getPostData();\n    if(think.isEmpty(postData)) {\n      return;\n    }\n    let threads = Object.keys(postData);\n    let index = 0;\n    while(true) {  // eslint-disable-line no-constant-condition\n      let ths = threads.slice(index, index + 10);\n      index += 10;\n      if(!ths.length) {\n        return;\n      }\n      let url = `http://changyan.sohu.com/api/2/topic/count?client_id=${comment.name}&topic_id=${ths.join(',')}`;\n      //think.log(`sync comments ${url}`);\n      let response = await _.get(url);\n      let data = JSON.parse(response.body).result;\n      let promises = [];\n      for(let key in data) {\n        if(data[key].comments === postData[key].comment_num) {\n          continue;\n        }\n        let id = postData[key].id;\n        let promise = this.model('post').where({id: id}).update({comment_num: data[key].comments});\n        promises.push(promise);\n      }\n      await Promise.all(promises);\n      if(promises.length) {\n        await this.clearPostCache();\n      }\n    }\n  }\n  /**\n   * sync from duoshuo\n   * @return {[type]} [description]\n   */\n  async syncFromNetease(comment) {\n    let postData = await this.getPostData();\n    if(think.isEmpty(postData)) {\n      return;\n    }\n\n    let site_url = comment.site_url;\n    if(site_url.slice(-1) !== '/') {\n      site_url = site_url + '/';\n    }\n\n    for(let i in postData) {\n      let post = postData[i];\n      post.url = site_url + (post.type ? 'page/' : 'post/') + post.pathname + '.html';\n    }\n\n    let threads = Object.keys(postData);\n    let index = 0;\n    let url = `https://api.gentie.163.com/products/${comment.name}/threads/joincounts`;\n    while(true) {  // eslint-disable-line no-constant-condition\n      let ths = threads.slice(index, index + 50);\n      if(!ths.length) {return;}\n      index += 50;\n      // think.log(`sync comments ${url}`);\n      let formData = {\n        data: JSON.stringify(\n          ths.map(th => ({url: postData[th].url, sourceId: null}))\n        )\n      };\n      let resp = await _.post({url, form: formData});\n      let data = JSON.parse(resp.body).data;\n\n      let promises = [];\n      for(let i=0; i<ths.length; i++) {\n        let post = postData[ths[i]];\n        if(data[i] === post.comment_num) {\n          continue;\n        }\n\n        let id = post.id;\n        promises.push(this.model('post').where({id}).update({comment_num: data[i]}));\n      }\n\n      await Promise.all(promises);\n      if(promises.length) {\n        await this.clearPostCache();\n      }\n    }\n  }\n\n  clearPostCache() {\n    return think.cache('post_1', null);\n  }\n}\n"
    ]
}