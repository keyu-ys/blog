{
    "version": 3,
    "sources": [
        "../../../src/home/model/tag.js"
    ],
    "names": [
        "relation",
        "post_tag",
        "type",
        "think",
        "model",
        "HAS_MANY",
        "field",
        "getHotTags",
        "getTagArchive",
        "data",
        "slice",
        "cache",
        "join",
        "table",
        "on",
        "where",
        "status",
        "is_public",
        "order",
        "select",
        "result",
        "tag",
        "pathname",
        "count",
        "name",
        "encodeURIComponent",
        "update_time",
        "sort",
        "a",
        "b"
    ],
    "mappings": "AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gLAKEA,Q,GAAW;AACTC,gBAAU;AACRC,cAAMC,MAAMC,KAAN,CAAYC,QADV;AAERC,eAAO;AAFC;AADD,K;;;AAOX;;;;mBAIMC,U;;;;;;;;qBACa,KAAKC,aAAL,E;;;AAAbC,kB;+CACGA,KAAKC,KAAL,CAAW,CAAX,EAAc,CAAd,C;;;;;;;;;;;;;;;;;AAGT;;;;;;;mBAKAF,a,4BAAgB;AAAA;;AACd,WAAOL,MAAMQ,KAAN,CAAY,MAAZ,6DAAoB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACR,OAAKP,KAAL,CAAW,UAAX,EACdQ,IADc,CACT;AACJC,uBAAO,MADH;AAEJC,oBAAI,CAAC,SAAD,EAAY,IAAZ;AAFA,eADS,EAKdF,IALc,CAKT;AACJC,uBAAO,KADH;AAEJC,oBAAI,CAAC,QAAD,EAAW,IAAX;AAFA,eALS,EASdC,KATc,CASR;AACLb,sBAAM,CADD;AAELc,wBAAQ,CAFH;AAGLC,2BAAW;AAHN,eATQ,EAcdC,KAdc,CAcR,kBAdQ,EAedC,MAfc,EADQ;;AAAA;AACrBV,kBADqB;AAkBrBW,oBAlBqB,GAkBZ,EAlBY;AAAA,0BAmBVX,IAnBU;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAmBjBY,iBAnBiB;;AAoBvB,kBAAGD,OAAOC,IAAIC,QAAX,CAAH,EAAyB;AACvBF,uBAAOC,IAAIC,QAAX,EAAqBC,KAArB,IAA8B,CAA9B;AACD,eAFD,MAEO;AACLH,uBAAOC,IAAIC,QAAX,IAAuB;AACrBE,wBAAMH,IAAIG,IADW;AAErBF,4BAAUG,mBAAmBJ,IAAIC,QAAvB,CAFW;AAGrBI,+BAAaL,IAAIK,WAHI;AAIrBH,yBAAO;AAJc,iBAAvB;AAMD;;AA7BsB;AAAA;AAAA;;AAAA;AAAA,gDAgClB,sBAAcH,MAAd,EAAsBO,IAAtB,CAA2B,UAACC,CAAD,EAAIC,CAAJ;AAAA,uBAASD,EAAEL,KAAF,GAAQM,EAAEN,KAAV,GAAkB,CAAC,CAAnB,GAAuB,CAAhC;AAAA,eAA3B,CAhCkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB,GAAP;AAkCD,G;;;EA1D0BpB,MAAMC,KAAN,CAAYJ,Q",
    "file": "../../../src/home/model/tag.js",
    "sourcesContent": [
        "'use strict';\n/**\n * model\n */\nexport default class extends think.model.relation {\n\n  relation = {\n    post_tag: {\n      type: think.model.HAS_MANY,\n      field: 'tag_id'\n    }\n  };\n\n  /**\n   * get hot tags\n   * @return {} []\n   */\n  async getHotTags() {\n    let data = await this.getTagArchive();\n    return data.slice(0, 5);\n  }\n\n  /**\n   * 获取标签数据\n   *\n   * @return {Promise}\n   */\n  getTagArchive() {\n    return think.cache('tags', async () => {\n      let data = await this.model('post_tag')\n        .join({\n          table: 'post',\n          on: ['post_id', 'id']\n        })\n        .join({\n          table: 'tag',\n          on: ['tag_id', 'id']\n        })\n        .where({\n          type: 0,\n          status: 3,\n          is_public: 1\n        })\n        .order('update_time DESC')\n        .select();\n\n      let result = {};\n      for(let tag of data) {\n        if(result[tag.pathname]) {\n          result[tag.pathname].count += 1;\n        } else {\n          result[tag.pathname] = {\n            name: tag.name,\n            pathname: encodeURIComponent(tag.pathname),\n            update_time: tag.update_time,\n            count: 1\n          };\n        }\n      }\n\n      return Object.values(result).sort((a, b)=> a.count>b.count ? -1 : 1);\n    });\n  }\n}\n"
    ]
}