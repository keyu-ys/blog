{
    "version": 3,
    "sources": [
        "../../../src/home/model/post.js"
    ],
    "names": [
        "relation",
        "cate",
        "type",
        "think",
        "model",
        "MANY_TO_MANY",
        "field",
        "tag",
        "user",
        "BELONG_TO",
        "init",
        "args",
        "getOptions",
        "feedFullText",
        "postsListSize",
        "getWhereCondition",
        "where",
        "extend",
        "is_public",
        "status",
        "create_time",
        "datetime",
        "getLastPostList",
        "cache",
        "getPostList",
        "postList",
        "data",
        "page",
        "options",
        "count",
        "name",
        "setRelation",
        "pathname",
        "find",
        "id",
        "isEmpty",
        "join",
        "table",
        "as",
        "on",
        "order",
        "countSelect",
        "getPostDetail",
        "fieldReverse",
        "detail",
        "createTime",
        "prevWhere",
        "prevPromise",
        "nextWhere",
        "nextPromise",
        "all",
        "prev",
        "next",
        "getPostRssList",
        "limit",
        "select",
        "getPostSitemapList",
        "getPostArchive",
        "result",
        "forEach",
        "yearMonth",
        "item",
        "push",
        "getPostSearch",
        "keyword"
    ],
    "mappings": "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",
    "file": "../../../src/home/model/post.js",
    "sourcesContent": [
        "'use strict';\n/**\n * model\n */\nexport default class extends think.model.relation {\n  /**\n   * relation\n   * @type {Object}\n   */\n  relation = {\n    cate: {\n      type: think.model.MANY_TO_MANY,\n      field: 'id,name,pathname'\n    },\n    tag: {\n      type: think.model.MANY_TO_MANY,\n      field: 'id,name,pathname'\n    },\n    user: {\n      type: think.model.BELONG_TO,\n      field: 'id,name,display_name,email'\n    }\n  };\n\n  async init(...args) {\n    super.init(...args);\n    let {feedFullText, postsListSize} = await this.model('options').getOptions();\n    this.feedFullText = feedFullText;\n    this.postsListSize = +postsListSize;\n  }\n  /**\n   * get where condition\n   * @param  {[type]} where [description]\n   * @return {[type]}       [description]\n   */\n  getWhereCondition(where) {\n    where = think.extend({}, where, {\n      is_public: 1, //公开\n      type: 0, //文章\n      status: 3 //已经发布\n    });\n    if(!where.create_time) {\n      where.create_time = {\n        '<=': think.datetime()\n      };\n    }\n    return where;\n  }\n\n  /**\n   * 获取最近的10条数据 - 有缓存\n   *\n   * @return {Promise}\n   */\n  getLastPostList() {\n    return think.cache('lastPostList', async () => {\n      let postList = await this.getPostList();\n      return postList.data;\n    });\n  }\n\n  /**\n   * get post list\n   * @param  {[type]} page  [description]\n   * @param  {[type]} where [description]\n   * @return {[type]}       [description]\n   */\n  async getPostList(page, options = {}) {\n    page = page | 0 || 1;\n\n    let field = options.field || 'id,title,pathname,create_time,summary,comment_num';\n    if((await this.model('user').count()) > 0) { field += ',user_id'; }\n\n    if(options.tag || options.cate) {\n      let name = options.tag ? 'tag' : 'cate';\n      let {id} = await this.model(name)\n        .field('id')\n        .setRelation(false)\n        .where({pathname: options.tag || options.cate})\n        .find();\n      if(think.isEmpty(id)) {\n        return false;\n      }\n      let where = this.getWhereCondition({[`${name}.${name}_id`]: id});\n      return this\n        .join({\n          table: `post_${name}`,\n          as: name,\n          on: ['id', 'post_id']\n        })\n        .where(where)\n        .order('create_time DESC')\n        .page(page, this.postsListSize)\n        .countSelect();\n    }\n\n    let where = this.getWhereCondition(options.where);\n    // only cache first page post\n    // if(page === 1){\n    //   return think.cache('post_1', () => {\n    //     return this.field(field)\n    //       .page(page, this.postsListSize)\n    //       .setRelation(false)\n    //       .order('create_time DESC')\n    //       .where(where)\n    //       .countSelect();\n    //   },{timeout:259200});\n    // }\n\n    return this.field(field)\n      .page(page, this.postsListSize)\n      .setRelation('user')\n      .order('create_time DESC')\n      .where(where)\n      .countSelect();\n  }\n\n  /**\n   * get post detail info\n   * @param  {[type]} pathname [description]\n   * @return {[type]}          [description]\n   */\n  async getPostDetail(pathname) {\n    let where = this.getWhereCondition({pathname});\n    let detail = await this.where(where).fieldReverse('markdown_content,summary').find();\n    if(think.isEmpty(detail)) {\n      return detail;\n    }\n    let createTime = think.datetime(detail.create_time);\n    let prevWhere = this.getWhereCondition({\n      create_time: ['<', createTime],\n      id: ['!=', detail.id]\n    });\n    let prevPromise = this.field('title,pathname')\n      .setRelation(false)\n      .where(prevWhere)\n      .order('create_time DESC')\n      .find();\n    let nextWhere = this.getWhereCondition({\n      create_time: ['>', createTime],\n      id: ['!=', detail.id]\n    });\n    let nextPromise = this.field('title,pathname')\n      .setRelation(false)\n      .where(nextWhere)\n      .order('create_time ASC')\n      .find();\n    let [prev, next] = await Promise.all([prevPromise, nextPromise]);\n    detail.prev = prev;\n    detail.next = next;\n    return detail;\n  }\n  async getPostRssList() {\n    let field = 'id,title,pathname,create_time,';\n    let where = this.getWhereCondition();\n\n    if(this.feedFullText === '0') {\n      field += 'summary,content';\n    } else {\n      field += 'content';\n    }\n\n    let data = await this.field(field)\n      .where(where)\n      .order('create_time DESC')\n      .setRelation(false)\n      .limit(10)\n      .select();\n    return data;\n  }\n\n  async getPostSitemapList() {\n    let field = 'pathname,type,update_time';\n    let where = {\n      is_public: 1, //公开\n      status: 3, //已经发布\n      create_time: {\n        '<=': think.datetime()\n      }\n    }\n\n    let data = await this.field(field)\n      .where(where)\n      .order('update_time DESC')\n      .setRelation(false)\n      .select();\n    return data;\n  }\n  /**\n   * get post archive\n   * @return {[type]} [description]\n   */\n  async getPostArchive() {\n    let where = this.getWhereCondition();\n    let data = await this.field('id,title,pathname,create_time')\n      .order('create_time DESC')\n      .setRelation(false)\n      .where(where)\n      .select();\n    let result = {};\n    data.forEach(item => {\n      let yearMonth = think.datetime(item.create_time, 'YYYY年MM月');\n      if(!(yearMonth in result)) {\n        result[yearMonth] = [];\n      }\n      result[yearMonth].push(item);\n    });\n    return result;\n  }\n  /**\n   * get post search result\n   * @param  {[type]} keyword [description]\n   * @param  {[type]} page    [description]\n   * @return {[type]}         [description]\n   */\n  async getPostSearch(keyword, page) {\n    let where = {'title|content': ['LIKE', `%${keyword}%`]}\n    where = this.getWhereCondition(where);\n    return this.where(where)\n      .page(page, this.postsListSize)\n      .setRelation(false)\n      .field('title,pathname,summary,create_time')\n      .order('create_time DESC')\n      .countSelect(false);\n  }\n}\n"
    ]
}