{
    "version": 3,
    "sources": [
        "../../../src/common/model/options.js"
    ],
    "names": [
        "cacheKey",
        "cacheOptions",
        "timeout",
        "type",
        "think",
        "isMaster",
        "getOptions",
        "flag",
        "cache",
        "select",
        "data",
        "result",
        "forEach",
        "item",
        "key",
        "value",
        "ret",
        "comment",
        "isString",
        "JSON",
        "parse",
        "upload",
        "push_sites",
        "updateOptions",
        "isObject",
        "extend",
        "undefined",
        "cacheData",
        "isEmpty",
        "changedData",
        "p1",
        "promises",
        "where",
        "count",
        "exist",
        "p",
        "update",
        "add",
        "push",
        "all",
        "auto_summary",
        "postModel",
        "model",
        "updateAllPostSummaries",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/common/model/options.js",
    "sourcesContent": [
        "'use strict';\n/**\n * model\n */\nexport default class extends think.model.base {\n  /**\n   * options cache key\n   * @type {String}\n   */\n  cacheKey = 'website_options';\n  /**\n   * cache options\n   * @type {Object}\n   */\n  cacheOptions = {\n    timeout: 30 * 24 * 3600 * 1000,\n    type: !think.isMaster ? 'file' : 'memory'\n  };\n  /**\n   * get options\n   * @return {} []\n   */\n  async getOptions(flag) {\n    if(flag === true) {\n      await think.cache(this.cacheKey, null);\n    }\n    let ret = await think.cache(this.cacheKey, async () => {\n      let data = await this.select();\n      let result = {};\n      data.forEach(item => {\n        result[item.key] = item.value;\n      });\n      return result;\n    }, this.cacheOptions);\n    //comment type\n    if(ret) {\n      if(ret.comment && think.isString(ret.comment)) {\n        ret.comment = JSON.parse(ret.comment);\n      }\n      if(!ret.comment) {\n        ret.comment = {type: 'disqus'};\n      }\n      // upload settings\n      if(ret.upload && think.isString(ret.upload)) {\n        ret.upload = JSON.parse(ret.upload);\n      }\n      if(!ret.upload) {\n        ret.upload = {type: 'local'};\n      }\n      if(ret.push_sites && think.isString(ret.push_sites)) {\n        ret.push_sites = JSON.parse(ret.push_sites);\n      }\n      if(!ret.push_sites) {\n        ret.push_sites = {};\n      }\n    }\n    return ret;\n  }\n  /**\n   * update options\n   * @return {} []\n   */\n  async updateOptions(key, value) {\n    let data = think.isObject(key) ? think.extend({}, key) : {[key] : value};\n    let cacheData = await think.cache(this.cacheKey, undefined, this.cacheOptions);\n    if(think.isEmpty(cacheData)) {\n      cacheData = await this.getOptions();\n    }\n    let changedData = {};\n    for(let key in data) {\n      if(data[key] !== cacheData[key]) {\n        changedData[key] = data[key];\n      }\n    }\n    //data is not changed\n    if(think.isEmpty(changedData)) {\n      return;\n    }\n    let p1 = think.cache(this.cacheKey, think.extend(cacheData, changedData), this.cacheOptions);\n    let promises = [p1];\n    for(let key in changedData) {\n      let value = changedData[key];\n      let exist = await this.where({key: key}).count('key');\n      let p;\n      if(exist) {\n        p = this.where({key: key}).update({value: value});\n      }else{\n        p = this.add({key, value});\n      }\n      promises.push(p);\n    }\n    await Promise.all(promises);\n    await this.getOptions(true);\n\n    // if `auto_summary` is changed, then rebuild all summaries of posts\n    if (typeof changedData.auto_summary !== 'undefined') {\n      const postModel = think.model('post', {}, 'admin');\n      // doesn't wait for return\n      await postModel.updateAllPostSummaries();\n    }\n  }\n}\n"
    ]
}